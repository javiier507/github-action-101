name: Demo Github Action
'on':
  pull_request:
    branches:
      - master
    types:
      - opened
      - closed

jobs:
  test:
    runs-on: ubuntu-22.04
    container:
      image: 'node:18'
    env:
      PORT: ${{ vars.PORT }}
      APP_KEY: ${{ vars.APP_KEY }}
      DRIVE_DISK: ${{ vars.DRIVE_DISK }}
    steps:
      - uses: actions/checkout@v2
      - name: Install & Tests
        run: npm install && npm test

  versioning:
    runs-on: ubuntu-22.04
    if: startsWith(github.head_ref, 'releases/')
    needs: test
    container:
      image: 'node:18'
    env:
      VERSION: ''
    outputs:
      version: ${{ steps.versioning.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Get Version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> "$GITHUB_ENV"
      - name: Print Version
        run: 'echo "${{ env.VERSION }}"'
      - id: versioning
        name: Save Version
        run: echo "version=${{ env.VERSION }}" >> "$GITHUB_OUTPUT"
      - name: Check Tag
        if: github.head_ref == 'release/prod'
        run: |
          git fetch --tags
          if [ $(git tag -l ${{ env.VERSION }}) ]; then echo "Ya existe una version ${{ env.VERSION }} etiquetada"; exit 1; fi

  delivery:
    runs-on: ubuntu-22.04
    if: github.event.pull_request.merged == true
    needs: versioning
    env:
      IMAGE_NAME: '${{ vars.IMAGE_NAME }}'
      IMAGE_VERSION: ${{ needs.versioning.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Image Name and Version for Dev and Staging
        if: github.head_ref != 'release/prod'
        run: |
          echo "IMAGE_VERSION=$GITHUB_SHA" >> $GITHUB_ENV
      - name: Print Name and Version
        run: 'echo "${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}"'

  deploy-dev:
    runs-on: ubuntu-22.04
    needs: delivery
    if: github.head_ref != 'release/prod'
    environment:
      name: Dev
      url: 'https://environment.dev'
    steps:
      - name: Deploy
        run: echo "Deploy in Dev!"

  e2e-dev:
    runs-on: ubuntu-22.04
    needs: deploy-dev
    environment: Dev
    steps:
      - name: E2E Test
        run: echo "E2E Test in Dev!"

  deploy-staging:
    runs-on: ubuntu-22.04
    needs: e2e-dev
    environment:
      name: Staging
      url: 'https://environment.staging'
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            whoami
            ls -al

  e2e-staging:
    runs-on: ubuntu-22.04
    needs: deploy-staging
    environment: Staging
    steps:
      - name: E2E Test
        run: echo "E2E Test in Staging!"

  deploy-prod:
    runs-on: ubuntu-22.04
    needs: delivery
    if: github.head_ref == 'release/prod'
    environment:
      name: Production
      url: 'https://environment.prod'
    steps:
      - name: Deploy
        run: echo "Deploy in Production!"
